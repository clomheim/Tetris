/* TCSS 305 Spring 2013
 * dlomheim_tetris
 */
package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;

import model.Board;
import model.IPiece;
import model.JPiece;
import model.LPiece;
import model.MutablePiece;
import model.OPiece;
import model.SPiece;
import model.TPiece;
import model.ZPiece;

/**
 * This class creates a board displaying the next piece to be dropped.
 * 
 * @author Doug Lomheim
 * @version 0.1.20130607
 */
@SuppressWarnings("serial")
public class NextBoard extends JPanel implements Observer
{
  /**
   * The size of each block.
   */
  private static final int BLOCK_SIZE = 20;
  
  /**
   * The last index of the array containing the coordiantes of the blocks.
   */
  private static final int INDEX_SIZE = 3;
  
  /**
   * Dimension for the preferred size of the panel, based on the size of the blocks.
   */
  private static final Dimension PREF_SIZE = new Dimension(BLOCK_SIZE * 6, BLOCK_SIZE * 4);
  
  /**
   * The height of the panel.
   */
  private static final int HEIGHT = BLOCK_SIZE * 4;
  
  /**
   * The board in which the game is being played.
   */
  private final Board my_board;
  
  /**
   * Initializes the next piece display.
   * 
   * @param the_board The board in which the game is being played.
   */
  public NextBoard(final Board the_board)
  {
    super();
    my_board = the_board;
    setBackground(Color.BLACK);
    setPreferredSize(PREF_SIZE);
  }
  
  /**
   * {@inheritDoc}
   */
  @Override
  public void paintComponent(final Graphics the_graphics)
  {
    super.paintComponent(the_graphics);
    final Graphics2D g2d = (Graphics2D) the_graphics;
    final MutablePiece piece = my_board.getNextPiece();
    int[][] loc;
    if (piece instanceof IPiece)
    {
      final IPiece ipiece = (IPiece) piece;
      loc = ipiece.getRotation();
      g2d.setPaint(ipiece.getBlock().getColor());
    }
    else if (piece instanceof JPiece)
    {
      final JPiece jpiece = (JPiece) piece;
      loc = jpiece.getRotation();
      g2d.setPaint(jpiece.getBlock().getColor());
    }
    else if (piece instanceof LPiece)
    {
      final LPiece lpiece = (LPiece) piece;
      loc = lpiece.getRotation();
      g2d.setPaint(lpiece.getBlock().getColor());
    }
    else if (piece instanceof OPiece)
    {
      final OPiece opiece = (OPiece) piece;
      loc = opiece.getRotation();
      g2d.setPaint(opiece.getBlock().getColor());
    }
    else if (piece instanceof SPiece)
    {
      final SPiece spiece = (SPiece) piece;
      loc = spiece.getRotation();
      g2d.setPaint(spiece.getBlock().getColor());
    }
    else if (piece instanceof TPiece)
    {
      final TPiece tpiece = (TPiece) piece;
      loc = tpiece.getRotation();
      g2d.setPaint(tpiece.getBlock().getColor());
    }
    else
    {
      final ZPiece zpiece = (ZPiece) piece;
      loc = zpiece.getRotation();
      g2d.setPaint(zpiece.getBlock().getColor());
    }
    
    g2d.fill(new Rectangle2D.Double(loc[0][1] * BLOCK_SIZE + BLOCK_SIZE, HEIGHT 
                                    - loc[0][0] * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE));
    g2d.fill(new Rectangle2D.Double(loc[1][1] * BLOCK_SIZE + BLOCK_SIZE, HEIGHT 
                                    - loc[1][0] * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE));
    g2d.fill(new Rectangle2D.Double(loc[2][1] * BLOCK_SIZE + BLOCK_SIZE, HEIGHT 
                                    - loc[2][0] * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE));
    g2d.fill(new Rectangle2D.Double(loc[INDEX_SIZE][1] * BLOCK_SIZE + BLOCK_SIZE, HEIGHT 
                                    - loc[INDEX_SIZE][0] * BLOCK_SIZE, BLOCK_SIZE, 
                                    BLOCK_SIZE));
    g2d.setPaint(Color.BLACK);
    g2d.draw(new Rectangle2D.Double(loc[0][1] * BLOCK_SIZE + BLOCK_SIZE, HEIGHT 
                                    - loc[0][0] * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE));
    g2d.draw(new Rectangle2D.Double(loc[1][1] * BLOCK_SIZE + BLOCK_SIZE, HEIGHT 
                                    - loc[1][0] * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE));
    g2d.draw(new Rectangle2D.Double(loc[2][1] * BLOCK_SIZE + BLOCK_SIZE, HEIGHT 
                                    - loc[2][0] * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE));
    g2d.draw(new Rectangle2D.Double(loc[INDEX_SIZE][1] * BLOCK_SIZE + BLOCK_SIZE, HEIGHT 
                                    -  loc[INDEX_SIZE][0] * BLOCK_SIZE, BLOCK_SIZE, 
                                    BLOCK_SIZE));
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void update(final Observable the_arg0, final Object the_arg1)
  {
    repaint();
    
  }
}
